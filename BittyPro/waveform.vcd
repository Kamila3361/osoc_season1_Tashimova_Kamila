$version Generated by VerilatedVcd $end
$date Thu Apr 18 12:39:21 2024
 $end
$timescale   1ps $end

 $scope module TOP $end
  $var wire  1 4 comp $end
  $var wire  1 3 cout $end
  $var wire 16 ) inst [15:0] $end
  $var wire 16 2 out [15:0] $end
  $var wire 16 * reg0 [15:0] $end
  $var wire 16 + reg1 [15:0] $end
  $var wire 16 , reg2 [15:0] $end
  $var wire 16 - reg3 [15:0] $end
  $var wire 16 . reg4 [15:0] $end
  $var wire 16 / reg5 [15:0] $end
  $var wire 16 0 reg6 [15:0] $end
  $var wire 16 1 reg7 [15:0] $end
  $scope module main $end
   $var wire 16 % A [15:0] $end
   $var wire 16 & B [15:0] $end
   $var wire  1 4 comp $end
   $var wire  1 3 cout $end
   $var wire 16 ) inst [15:0] $end
   $var wire  1 $ mode $end
   $var wire  3 5 mux_sel1 [2:0] $end
   $var wire  3 6 mux_sel2 [2:0] $end
   $var wire 16 2 out [15:0] $end
   $var wire 16 * reg0 [15:0] $end
   $var wire 16 + reg1 [15:0] $end
   $var wire 16 , reg2 [15:0] $end
   $var wire 16 - reg3 [15:0] $end
   $var wire 16 . reg4 [15:0] $end
   $var wire 16 / reg5 [15:0] $end
   $var wire 16 0 reg6 [15:0] $end
   $var wire 16 1 reg7 [15:0] $end
   $var wire  4 # sel [3:0] $end
   $scope module alu1 $end
    $var wire 16 2 alu_out [15:0] $end
    $var wire 16 ' alu_out1 [15:0] $end
    $var wire 16 ( alu_out2 [15:0] $end
    $var wire  1 8 carry_in $end
    $var wire  1 3 carry_out $end
    $var wire  1 4 compare $end
    $var wire 16 % in_a [15:0] $end
    $var wire 16 & in_b [15:0] $end
    $var wire  1 $ mode $end
    $var wire  4 # select [3:0] $end
    $scope module arith $end
     $var wire 16 ' alu_out [15:0] $end
     $var wire  1 8 carry_in $end
     $var wire  1 3 carry_out $end
     $var wire  1 4 compare $end
     $var wire 16 % in_a [15:0] $end
     $var wire 16 & in_b [15:0] $end
     $var wire  4 # select [3:0] $end
    $upscope $end
    $scope module log $end
     $var wire 16 ( alu_out [15:0] $end
     $var wire 16 % in_a [15:0] $end
     $var wire 16 & in_b [15:0] $end
     $var wire  4 # select [3:0] $end
    $upscope $end
   $upscope $end
   $scope module unit1 $end
    $var wire 16 ) inst [15:0] $end
    $var wire  1 $ mode $end
    $var wire  3 5 mux_sel [2:0] $end
    $var wire  3 5 mux_sel_reg [2:0] $end
    $var wire  1 7 number $end
    $var wire  4 # sel [3:0] $end
   $upscope $end
   $scope module unit2 $end
    $var wire 16 ) inst [15:0] $end
    $var wire  1 $ mode $end
    $var wire  3 6 mux_sel [2:0] $end
    $var wire  3 6 mux_sel_reg [2:0] $end
    $var wire  1 8 number $end
    $var wire  4 # sel [3:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0000 #
0$
b0000000000000000 %
b0000000000000000 &
b0000000000000000 '
b0000000000000000 (
b0000000000000000 )
b0000000000000000 *
b0000000000000000 +
b0000000000000000 ,
b0000000000000000 -
b0000000000000000 .
b0000000000000000 /
b0000000000000000 0
b0000000000000000 1
b0000000000000000 2
03
04
b000 5
b000 6
17
08
#1
#2
#3
#4
#5
#6
#7
b0000000000000001 '
b0000000000000001 2
14
#8
#9
#10
#11
#12
#13
b1111 #
b0111000010000111 %
b0111100011100001 &
b0000000000000000 '
b0011110100111101 )
b0000110111011100 *
b0111000010000111 +
b0001101001110000 ,
b0101110111101001 -
b0100100000111110 .
b0101010010100001 /
b0100001001000001 0
b0111100011100001 1
b0000000000000000 2
04
b001 5
b111 6
#14
b0011 #
1$
b0100111000101010 %
b0101010000111011 &
b1111100111101111 '
b1010000111000100 (
b0101011110001111 )
b0010010000111000 *
b0101100001011100 +
b0100111000101010 ,
b0100001011101100 -
b0111110010110000 .
b0101010000111011 /
b0000011011111011 0
b0001101000110010 1
b1010000111000100 2
13
b010 5
b101 6
#15
#16
#17
#18
#19
#20
#21
#22
#23
#24
#25
#26
#27
b1101 #
b0100010111111010 %
b0100010111111010 &
b0000000000000000 '
b0000000000000000 (
b0000001001110111 )
b0100010111111010 *
b0100101111001011 +
b0010100001101100 ,
b0111110100000101 -
b0110101010101100 .
b0101010010000110 /
b0111111000100001 0
b0111101000101011 1
b0000000000000000 2
03
14
b000 5
b000 6
#28
#29
#30
#31
#32
#33
#34
#35
#36
b0001 #
b0111011000111110 %
b0100101000000101 &
b0111011000111101 '
b1011110111111011 (
b0010101110000110 )
b0010110011000011 *
b0111011000111110 +
b0100101000000101 ,
b0000000011110001 -
b0101110111101100 .
b0010111011011001 /
b0110100001100111 0
b0100110000110011 1
b1011110111111011 2
04
b001 5
b010 6
#37
#38
b1101 #
0$
b0110111001111000 %
b0010110010111100 &
b0000000000000000 '
b0000000000000000 (
b0100000110110100 )
b0010110010111100 *
b0000010101000100 +
b0110111001111000 ,
b0010001011111010 -
b0100111101001001 .
b0110111101101001 /
b0000000011100110 0
b0111111000100011 1
b0000000000000000 2
b010 5
b000 6
#39
#40
#41
#42
#43
#44
#45
b0101 #
1$
b0011110110101101 %
b0110000001010001 &
b0101111010010101 '
b0001110110101100 (
b0110101001010111 )
b0110110101011001 *
b0110010111010011 +
b0110000001010001 ,
b0011110110101101 -
b0110111110101100 .
b0001011110000110 /
b0111001010010101 0
b0010110010000000 1
b0001110110101100 2
b011 5
b010 6
#46
b0000 #
0$
b0100011001111100 %
b0011110001100110 &
b0000000000000001 '
b0000010001100100 (
b0001011111000000 )
b0100011001111100 *
b0011001010111011 +
b0100110000100010 ,
b0111110011111100 -
b0100010111100100 .
b0011110001100110 /
b0101111111011010 0
b0101101001100001 1
b0000000000000001 2
b000 5
b101 6
#47
#48
#49
